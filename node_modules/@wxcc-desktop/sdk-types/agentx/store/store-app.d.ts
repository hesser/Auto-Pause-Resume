import { CssDynamic } from "@/app/components/CssDynamic";
import { Store } from "@/store";
import { Chat, EmailComposer, PciComplianceSettings } from "@agentx/agentx-mfe-react-based";
import { WxmWrapper } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
import { LoginVoiceOptions } from "@agentx/agentx-services/dist/types/services/constant";
export declare class ModuleApp {
    constructor();
    title: string;
    logo: any;
    appTitleAsImage: boolean;
    taskAreaCollapsed: boolean;
    auxilliaryPanelCollapsed: boolean;
    defaultMaximizeAreaName: string;
    darkThemeEnabled: boolean;
    darkMode: boolean;
    wasAskedPwaInstall: boolean;
    showAuxPanelAsOverlay: boolean;
    changeTeamLoading: boolean;
    isStationLoginOpen: boolean;
    isEmergencyModalOpen: boolean;
    changeTeamsError: boolean;
    isStationLoginSuccess: boolean;
    changeProfileSettingsLoading: boolean;
    changeProfileSettingsError: boolean;
    stopNavigateOnAcceptTask: boolean;
    collapseVoiceIntPane: boolean;
    isVoiceIntPaneUpdatedByUser: boolean | null;
    taskPageIllustration: string;
    isRTDIntialized: boolean;
    microsoftOrgConfig: Store.App.msOrgConfig | null;
    webexOrgConfig: Store.App.webexOrgConfig | null;
    datacenter: string;
    theme: string;
    /**
     * WXM
     */
    wxmEnabled: boolean;
    userModel: WxmWrapper.ResponseData;
    /**
     * WEBEX
     */
    webexEnabled: boolean;
    webexShowModal: boolean;
    webexMinimized: boolean;
    language: string;
    webexMeetingTimeStamp: number;
    webexDndEnabled: boolean;
    webexEventRegistered: boolean;
    isEnvironmentProd: boolean;
    domainUrl: string;
    featureFlags: {
        isCareAttachmentEnabled: boolean;
        isVideoEnabled: boolean;
        isCloudCherryEnabled: boolean;
        isDigitalFFEnabled: boolean;
        isPCIComplianceEnabled: boolean;
        isDesktopReasonCodeEnabled: boolean;
        isImiChatWidgetEnabled: boolean;
        isSteeringDigitsAppendEnabled: boolean;
        isTahoeEnabled: boolean;
        isSecureCADVariablesEnabled: boolean;
        isDesktopNotesWidgetEnabled: boolean;
        isAdvancedHeaderEnabled: boolean;
        isLogRocketEnabled: boolean;
        isDesktopContactCleanup: boolean;
        isLogRocketMaskingDisabled: boolean;
        isInternationalDiallingEnabled: boolean;
        isIMIGlobalVariablesEnabled: boolean;
        isGlobalVariablesEnabled: boolean;
        isDesktopConsultToEntryPointDnEnabled: boolean;
        isDesktopMaxSessionLimitsEnabled: boolean;
        isSignoutBySupervisorEnabled: boolean;
        isCallbackRetryEnabled: boolean;
        isWebRTCEnabled: boolean;
        isWebRTCSupervisorEnabled: boolean;
        isProgressiveCampaignEnabled: boolean;
        isProgressiveCampaign1NEnabled: boolean;
        isDesktopMaerskEnhancementEnabled: boolean;
        isESDPostInteractionInsightsEnabled: boolean;
        isDesktopMaerskAcqueonTeamId: boolean;
        isNativeChat: boolean;
        isDesktopCpdViewEnabled: boolean;
        isAddressBookInfiniteScrollEnabled: boolean;
        isProjectionOutdialANIEnabled: boolean;
        isDesktopMSStateSyncEnabled: boolean;
        isDesktopAuxCodesInfiniteScrollEnabled: boolean;
        isDesktopWebexStateSyncEnabled: boolean;
        isDesktopEmergencyNotificationEnabled: boolean;
        isWebrtcRingingEnabled: boolean;
        isWebrtcEndCallEnabled: boolean;
        isWxccMultiPartyConfEnabled: boolean;
        isAiAssistantEnabled: boolean;
        isQMWShowConsultRecordingsEnabled: boolean;
        isRecordingsRicherMetadataEnabled: boolean;
        isDesktopConferenceRecordingEnabled: boolean;
        isWxccPersistCallEnabled: boolean;
        isShowSignedOutAgentsEnabled: boolean;
        isAutoCsatEnabled: boolean;
        isWxccAgentInteractionEnabled: boolean;
        isMomentumV2Enabled: boolean;
        isWebexDirectoryViewEnabled: boolean;
        isWxccAllowOutdialCallAlwaysEnabled: boolean;
        isMaskSensitiveDataFFEnabled: boolean;
        isAllowConfTransferToEpDnEnabled: boolean;
        isOutdialOrgSearchEnabled: boolean;
        isConfirmDialogEnabled: boolean;
        isSuppressWebexCallingNotificationEnabled: boolean;
        isConsultTransferInfiniteScrollEnabled: boolean;
    };
    pciCompliance: {
        action: string;
        isAttachmentEnabled: boolean;
    };
    pciAllowedAttachmentTypes: string;
    imiScriptLoaded: boolean;
    /**
     * Computed values to simplify passing data to Web Components
     */
    get isInteractionBtnConfirmDialogEnabled(): boolean;
    get chatConfigs(): Chat.ChatConfigs;
    get multipartyOrPersistsFF(): boolean;
    get pciSettings(): PciComplianceSettings;
    get pciAllowedAttachments(): string;
    get emailConfigs(): EmailComposer.EmailConfigs;
    get imiConfigs(): {
        imiWidgetEnabled: boolean;
        imiScriptLoaded: boolean;
        isStationLoginSuccess: boolean;
    };
    get cssDynamicVars(): CssDynamic.AgentXVars;
    updateIsRTDInitializedFlag(value: boolean): void;
    getDeviceType: (isExtension: boolean) => LoginVoiceOptions;
    login(stationLoginData: Service.Aqm.Agent.UserStationLogin, userPrefData: Service.userPrefs.UserPreferences): Promise<void>;
    loginAgentWithNewTeam(stationLoginData: Service.Aqm.Agent.UserStationLogin): Promise<void>;
    getAgentDN(): string | null;
    fetchDefaultIdleCodeId: (orgId: string) => Promise<string>;
    getDefaultAuxCode: () => string;
    saveUserPreferenceInSessionStorage(data: any): void;
    deleteUserPreferenceFromSessionStorage(): void;
    /**
     * Save or Update User Preferences when submit is called from User Station Login or Profile Settings
     * @param payloadUserPreferences
     */
    saveOrUpdateUserPreferences(payloadUserPreferences: Service.userPrefs.UserPreferences | Service.userPrefs.emergencyUserPreference): Promise<void>;
    /**
     * Delete User Preferences when Remember Me checkbox is unchecked and submit is called from User Station Login or Profile Settings
     */
    deleteUserPreferences(): Promise<void>;
    /**
     * capture the event when user switched device type from Desktop to any other value
     * @param deviceType
     */
    addTelemetryOnDeviceSwitchFromDesktop(deviceType: Service.Aqm.Agent.DeviceType): void;
    logout(profileDetails: Service.Conf.UserProfile): Promise<void>;
    logoutFromCurrentTeam(selectedTeam: Service.Conf.Team): Promise<void>;
    /**
     * Actions
     */
    updateTitle(title: string): void;
    updateAppTitleAsImage(appTitleAsImage: boolean): void;
    updateLogo(logoUrl: string): void;
    updateTaskPageIllustration(url: string): void;
    updateStopNavigateOnAcceptTask(isEnabled: boolean): void;
    updateCollapseVoiceIntPane(isEnabled: boolean): void;
    updateUserVoiceIntPaneState(isEnabled: boolean): void;
    toggleDarkMode(isEnabled: boolean): void;
    updateWebexEnabled(isEnabled: boolean): void;
    updateWebexEventRegistrationStatus(isRegistered: boolean): void;
    updateWebexShowModal(isShow: boolean): void;
    updateWebexMeetingTimeStamp(timeStamp: number): void;
    updateWebexMinimized(isShow: boolean): void;
    updateLanguage(lng: string): void;
    updateWxmEnabled(isEnabled: boolean): void;
    updateWebexDnd(isEnabled: boolean): void;
    updateStationLoginOpen(isOpen: boolean): void;
    updateEmergencyModalOpen(isOpen: boolean): void;
    updateStationLoginSuccess(isSuccess: boolean): void;
    setChangeTeamsLoginFailed(isError: boolean): void;
    setChangeProfileSettingsLoginFailed(isError: boolean): void;
    updateIMIFeatureFlag(status: boolean): void;
    updateUserModel(accessToken: WxmWrapper.ResponseData["access_token"], expiresIn: WxmWrapper.ResponseData["expires_in"]): void;
    updateFeatureFlags(featureFlags: object | undefined): void;
    updatePciCompliance(pciComplianceSettings: PciComplianceSettings | undefined): void;
    updatePciAllowedAttachmentTypes(allowedAttachmentTypes: string): void;
    toggleTaskAreaCollapse(): void;
    toggleAuxilliaryPanelCollapse(): void;
    setShowAuxPanelAsOverlay(showAuxPanelAsOverlayParam: boolean): void;
    checkPwaInstall(): Promise<void>;
    setAskedPwaInstall(): void;
    updateMicrosoftOrgConfig(data: Service.Cms.MicrosoftConfigResponse): void;
    updateWebexOrgConfig(orgConfig: {
        showUserDetails: boolean;
        stateSynchronization: boolean;
        idleCodes: Service.Cms.WebexIdleCodes;
    }): void;
    setChangeTeamLoading(changeTeamLoading: boolean): void;
    changeAgentTeam(selectedTeam: Service.Conf.Team): void;
    updateProfileSettings(profileDetails: Service.Conf.UserProfile): void;
    setChangeProfileSetingsLoading(changeProfileSettingsLoading: boolean): void;
    setImiScriptLoad(): void;
    setIsEnvironmentProd(isProd: boolean): void;
    setDomainUrl(url: string): void;
    setDatacenter(datacenter: string): void;
    updateTheme(theme: string): void;
}
declare module "@/store" {
    namespace Store.App {
        type FeatureFlagConfigs = {
            isCareAttachmentEnabled: boolean;
            isPCIComplianceEnabled: boolean;
            isVideoEnabled: boolean;
            isDigitalFFEnabled: boolean;
            isCloudCherryEnabled: boolean;
            isDesktopReasonCodeEnabled: boolean;
            isImiChatWidgetEnabled: boolean;
            isSteeringDigitsAppendEnabled: boolean;
            isTahoeEnabled: boolean;
            isSecureCADVariablesEnabled: boolean;
            isDesktopNotesWidgetEnabled: boolean;
            isAdvancedHeaderEnabled: boolean;
            isLogRocketEnabled: boolean;
            isDesktopContactCleanup: boolean;
            isLogRocketMaskingDisabled: boolean;
            isInternationalDiallingEnabled: boolean;
            isIMIGlobalVariablesEnabled: boolean;
            isGlobalVariablesEnabled: boolean;
            isDesktopConsultToEntryPointDnEnabled: boolean;
            isDesktopMaxSessionLimitsEnabled: boolean;
            isSignoutBySupervisorEnabled: boolean;
            isCallbackRetryEnabled: boolean;
            isWebRTCEnabled: boolean;
            isWebRTCSupervisorEnabled: boolean;
            isProgressiveCampaignEnabled: boolean;
            isProgressiveCampaign1NEnabled: boolean;
            isDesktopMaerskEnhancementEnabled: boolean;
            isESDPostInteractionInsightsEnabled: boolean;
            isDesktopMaerskAcqueonTeamId: boolean;
            isNativeChat: boolean;
            isDesktopCpdViewEnabled: boolean;
            isAddressBookInfiniteScrollEnabled: boolean;
            isProjectionOutdialANIEnabled: boolean;
            isDesktopMSStateSyncEnabled: boolean;
            isDesktopAuxCodesInfiniteScrollEnabled: boolean;
            isDesktopWebexStateSyncEnabled: boolean;
            isDesktopEmergencyNotificationEnabled: boolean;
            isWebrtcRingingEnabled: boolean;
            isWebrtcEndCallEnabled: boolean;
            isWxccMultiPartyConfEnabled: boolean;
            isAiAssistantEnabled: boolean;
            isQMWShowConsultRecordingsEnabled: boolean;
            isRecordingsRicherMetadataEnabled: boolean;
            isDesktopConferenceRecordingEnabled: boolean;
            isWxccPersistCallEnabled: boolean;
            isShowSignedOutAgentsEnabled: boolean;
            isAutoCsatEnabled: boolean;
            isWxccAllowOutdialCallAlwaysEnabled: boolean;
            isWxccAgentInteractionEnabled: boolean;
            isMomentumV2Enabled: boolean;
            isWebexDirectoryViewEnabled: boolean;
            isMaskSensitiveDataFFEnabled: boolean;
            isAllowConfTransferToEpDnEnabled: boolean;
            isOutdialOrgSearchEnabled: boolean;
            isConfirmDialogEnabled: boolean;
            isSuppressWebexCallingNotificationEnabled: boolean;
            isConsultTransferInfiniteScrollEnabled: boolean;
        };
        type WxmCred = {
            apiKey: string;
            wxmUser: string;
        };
        type WxmUserParams = {
            spaceId: string;
            metricId: string;
        };
        type msOrgConfig = {
            active: boolean;
            accountDetails: {
                tenantId: string;
            };
            showUserDetails: boolean;
            stateSynchronization: boolean;
            idleCodes: {
                doNotDisturbId: string;
                onACallId: string;
                presentingId: string;
            };
        };
        type webexOrgConfig = {
            showUserDetails: boolean;
            stateSynchronization: boolean;
            idleCodes: {
                busyId: string;
                doNotDisturbId: string;
                inACalendarMeetingId: string;
                inAMeetingId: string;
                onACallId: string;
                outOfOfficeId: string;
                presentingId: string;
                quietHoursId: string;
            };
        };
    }
}
export declare const app: ModuleApp;
