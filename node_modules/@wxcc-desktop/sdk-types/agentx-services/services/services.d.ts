import { shortcutKeyService } from "../services/shortcutKey/shortcutkey-service";
import { ActionsChannelsService } from "./actions-channels/actions-channels-service";
import { absService } from "./agentx-backend-proxy/agentx-backend-proxy-service";
import { AqmService } from "./aqm/aqm-service";
import { cmsService } from "./cms/cms-service";
import { ConfService } from "./conf/conf-service";
import { constant } from "./constant";
import { emmService } from "./emm/emm-service";
import { FeatureFlagService } from "./featureFlag/feature-flag-service";
import { MicrosoftService } from "./integration/microsoft/microsoft-authentication";
import { LogRocketService } from "./logrocket/log-rocket-service";
import { MediaStorage } from "./mediaStorage/media-storage-service";
import { MixPanelService } from "./mixpanel/mix-panel-service";
import { pciService } from "./pci/pci-service";
import { PrometheusService } from "./prometheus/prometheus-tracking";
import { qmwService } from "./qmw/qmw-service";
import { SummarizerService } from "./summarizer/summarizer-service";
import { tahoeService } from "./tahoe/tahoe-service";
import { TelemetryService } from "./telemetry/telemetry-service";
import { userPrefsService } from "./userPreferences/user-preferences-service";
import { WebCallingService } from "./webex/web-calling-service";
import { WebexService } from "./webex/webex-service";
import { WebexMetricsService } from "./webexMetrics/webex-metrics-service";
export declare class AgentxServices {
    aqm: AqmService;
    emm: ReturnType<typeof emmService>;
    cms: ReturnType<typeof cmsService>;
    abs: ReturnType<typeof absService>;
    tahoe: ReturnType<typeof tahoeService>;
    conf: ConfService;
    pci: ReturnType<typeof pciService>;
    mediaStorage: MediaStorage;
    shortcut: ReturnType<typeof shortcutKeyService>;
    constants: ReturnType<typeof constant>;
    actionsChannels: ActionsChannelsService;
    webexMetrics: WebexMetricsService;
    summarizer: SummarizerService;
    mixpanel: MixPanelService;
    webex: WebexService;
    prometheus: PrometheusService;
    telemetry: TelemetryService;
    featureflag: FeatureFlagService;
    logrocket: LogRocketService;
    userPrefs: ReturnType<typeof userPrefsService>;
    webCalling: WebCallingService;
    qmw: ReturnType<typeof qmwService>;
    microsoft: MicrosoftService;
    i18n: import("i18next").i18n & {
        readonly DEFAULT_INIT_OPTIONS: import("i18next").InitOptions;
    };
    isIniting: boolean;
    isInited: boolean;
    init(accessToken: string): Promise<void>;
}
//# sourceMappingURL=services.d.ts.map