import { Msg } from "../../core/aqm-reqs";
import { exposedBackendAPIs, exposedBackendContactAPIs } from "../agentx-backend-proxy/agentx-backend-for-jssdk";
import { aqmConfigs } from "./aqm-service-configs";
import { ConnectionService } from "./aqm-service-connection";
import { aqmContact } from "./aqm-service-contact";
import { aqmDialer } from "./aqm-service-dialer";
import { aqmScreenPop } from "./aqm-service-screenpop";
import { routingAgent } from "./routing-agent-service";
import { createRoutingContactAPIS } from "./routing-contact";
import { routingSupervisor } from "./routing-supervisor-service";
/**
 * Aqm Service.
 * Initializes Notifs connection as well as provides interface to emit AQM requests.
 */
export declare class AqmService {
    private readonly notifs;
    readonly agent: ReturnType<typeof routingAgent> & ReturnType<typeof exposedBackendAPIs>;
    readonly configs: ReturnType<typeof aqmConfigs>;
    readonly contact: ReturnType<typeof aqmContact> & ReturnType<typeof createRoutingContactAPIS> & ReturnType<typeof exposedBackendContactAPIs>;
    readonly dialer: ReturnType<typeof aqmDialer>;
    readonly connectionConfig: ReturnType<typeof ConnectionService>;
    readonly screenpop: ReturnType<typeof aqmScreenPop>;
    readonly supervisor: ReturnType<typeof routingSupervisor>;
    closeSocket(shouldReconnect: boolean, reason: string): void;
    constructor(init: (p: () => Promise<void>) => void);
    private externalContactRouteFeatureFlags;
}
declare module "../../index" {
    namespace Service.Aqm.Global {
        type Failure = Msg<{
            agentId: string;
            trackingId: string;
            reasonCode: number;
            orgId: string;
            reason: string;
        }>;
        type contactRouteFeatureFlag = {
            desktopEOLEndWrapup: boolean;
        };
        type agentRouteFeatureFlag = {
            desktopEOLStateChange: boolean;
        };
    }
}
//# sourceMappingURL=aqm-service.d.ts.map